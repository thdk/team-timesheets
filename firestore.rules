rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        function getAuthUser2() {
            let user = get(/databases/$(database)/documents/users/$(request.auth.uid));
            let authUser = user.data.keys().hasAny(["divisionUserId"])
                    ? get(/databases/$(database)/documents/division-users/$(user.data.divisionUserId))
                    : user;
            return authUser;
        }
        function getAuthUser(data) {
            let user = get(/databases/$(database)/documents/users/$(request.auth.uid));
            let authUser = data.keys().hasAny(["divisionId"])
                    ? get(/databases/$(database)/documents/division-users/$(user.data.divisionUserId))
                    : user;

            return data.keys().hasAny(["divisionId"])
                ? (
                    data.divisionId == authUser.data.divisionId
                    ? authUser
                    : null
                )
                : authUser;
        }

        function isPowerUser(data) {
            return data.keys().hasAny(["divisionId"]) &&
                    get(/databases/$(database)/documents/divisions/$(data.divisionId)).data.createdBy == request.auth.uid;
        }

        function isAuthorised(authUser, role) {
            return (
                    authUser != null && authUser.data.roles.keys().hasAny([role])
                    && authUser.data.roles[role]
                )
        }

        function isUpdateToField(field) {
            return request.resource.data.diff(resource.data).affectedKeys().hasAny([field]);
        }

        match /registrations/{registrationId} {
            allow read, create: if request.auth != null;
            allow update: if request.resource.data.userId == getAuthUser2().id;
            allow delete: if get(/databases/$(database)/documents/registrations/$(registrationId)).data.userId == request.auth.uid;
        }

        match /reports/{reportId} {
            allow read, write;
        }

        match /projects/{documentId} {
            allow read;
            allow create: if isAuthorised(getAuthUser(request.resource.data), 'editor') == true || isAuthorised(getAuthUser(request.resource.data), 'admin') == true;
            allow update, delete: if (isAuthorised(getAuthUser(request.resource.data), 'editor') == true && resource.data.createdBy == request.auth.uid) || isAuthorised(getAuthUser(request.resource.data), 'admin') == true;
        }

        match /clients/{document} {
            allow read;
            allow create: if isAuthorised(getAuthUser(request.resource.data), 'admin') == true;
            allow update, delete: if isAuthorised(getAuthUser(resource.data), 'admin') == true;
        }

        match /teams/{document} {
            allow read;
            allow create: if isAuthorised(getAuthUser(request.resource.data), 'admin') == true;
            allow update, delete: if isAuthorised(getAuthUser(resource.data), 'admin') == true;
        }

        match /tasks/{document} {
            allow read;
            allow create: if isAuthorised(getAuthUser(request.resource.data), 'admin') == true;
            allow update, delete: if isAuthorised(getAuthUser(resource.data), 'admin') == true;
        }

        match /users/{userId} {
            allow read: if
                request.auth != null
                && (
                    request.auth.uid == userId
                    || isAuthorised(getAuthUser(resource.data), 'admin')
                );
            allow list: if
                request.auth != null
                && isAuthorised(getAuthUser2(), 'admin');
            allow update: if
                isAuthorised(getAuthUser(request.resource.data), 'admin') == true
                || (
                    (
                        userId == request.auth.uid
                        || resource.data.uid == request.auth.uid
                    )
                    && !isUpdateToField('roles')
                );
            allow create: if (
                request.auth != null && request.resource.data.uid == request.auth.uid && request.resource.data.roles.keys().hasOnly(["user"])
            ) || isPowerUser(request.resource.data);
            allow delete: if isAuthorised(getAuthUser(request.resource.data), 'admin') == true;
        }

        match /division-users/{divisionUserId} {
            allow get: if
                request.auth != null
                && (
                    request.auth.uid == resource.data.uid
                );
            allow list: if isAuthorised(getAuthUser2(), 'admin')
                || resource.data.uid==request.auth.uid;
            allow create, update, delete;
        }

        match /favorite-groups/{groupId} {
            allow read;
            allow create: if request.auth != null;
            allow update, delete: if request.auth != null;
        }

        match /favorites/{favoriteId} {
            allow read: if request.auth != null;
            allow create: if request.auth != null;
            allow update, delete: if request.auth != null;
        }

        match /configs/{configId} {
            allow read;
        }

        match /divisions/{divisionId} {
            allow read;
            allow create: if request.auth != null;
        }
    }
}
